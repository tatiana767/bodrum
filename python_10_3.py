'''Необходимо создать класс Bank со следующими свойствами:

Атрибуты объекта:
balance - баланс банка (int)
lock - объект класса Lock для блокировки потоков.

Методы объекта:
Метод deposit:
Будет совершать 100 транзакций пополнения средств.
Пополнение - это увеличение баланса на случайное целое число от 50 до 500.
Если баланс больше или равен 500 и замок lock заблокирован - lock.locked(), то разблокировать его методом release.
После увеличения баланса должна выводится строка "Пополнение: <случайное число>. Баланс: <текущий баланс>".
Также после всех операций поставьте ожидание в 0.001 секунды, тем самым имитируя скорость выполнения пополнения.
Метод take:
Будет совершать 100 транзакций снятия.
Снятие - это уменьшение баланса на случайное целое число от 50 до 500.
В начале должно выводится сообщение "Запрос на <случайное число>".
Далее производится проверка: если случайное число меньше или равно текущему балансу, то
произвести снятие, уменьшив balance на соответствующее число и вывести на экран "Снятие: <случайное число>.
 Баланс: <текущий баланс>".
Если случайное число оказалось больше баланса, то вывести строку "Запрос отклонён, недостаточно средств" и
заблокировать поток методом acquiere.
Далее создайте объект класса Bank и создайте 2 потока для его методов deposit и take.
Запустите эти потоки.
После конца работы потоков выведите строку: "Итоговый баланс: <баланс объекта Bank>".

По итогу вы получите скрипт блокирующий поток до баланса равному 500 и больше или блокирующий,
когда происходит попытка снятия при недостаточном балансе.
Пример результата выполнения программы:
'''

from threading import Thread, Lock
from random import randint
from time import sleep

class Bank:

    def __init__(self):
       self.balance = 0
       self.lock_ = Lock()


    def deposit(self):
        for i in range(0,100):

           rnd = randint(50, 500)
           self.balance +=rnd
           print(f'Пополнение : {rnd}, Баланс: {self.balance} ')
           if self.balance >= 500 and self.lock_.locked() :
               self.lock_.release()
           sleep(0.1)

    def take(self):
        for i in range(0, 100):
            rnd = randint(50, 500)
            print(f'Запрос на {rnd}')
            sleep(0.1)
            if rnd <= self.balance:
                self.balance -= rnd
                print(f'Снятие {rnd}. Баланс : {self.balance}')
            else :
                print('Запрос отклонён, недостаточно средств')
                self.lock_.acquire()


bk = Bank()
tr1 = Thread(target = Bank.deposit, args = (bk, ))
tr2 = Thread(target = Bank.take, args = (bk, ))
tr1.start()
tr2.start()
tr1.join()
tr2.join()


print(f'Итоговый баланс: {bk.balance}')